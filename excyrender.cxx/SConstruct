Execute('../bootstrap')

env = Environment(CPPPATH = ['.', '../bootstrapped/Catch/include/'],
                  CXXFLAGS="-std=c++0x -Wall -O3 -ffast-math -march=native -msse2 -fopenmp",
                  )

excygen = env.Program(target='excygen',
                source=['main.cc',
                        'main_test.cc',
                        'ImageFormat/PPM.cc',
                        'Photometry/SPD/Regular.cc',
                        'Photometry/SPD/Constant.cc',
                        'Photometry/Spectrum.cc',
                        'Primitives/BoundingIntervalHierarchy.cc',
                        'Shapes/BoundingIntervalHierarchy.cc',
                        'DebugPixel.cc',
                        'Shapes/Terrain2d.cc',
                        'Scripting/Et1.cc',
                        'Scripting/Et1/Token.cc',
                        'Scripting/Et1/AST.cc',
                        'Scripting/Et1/ASTPasses/1000_lambda_lift.cc',
                        'Scripting/Et1/ASTPasses/1100_resolve_types.cc',
                        'Scripting/Et1/ASTPasses/0500_lift_identifiers_to_calls.cc',
                        'Scripting/Et1/ASTQueries/find_references.cc',
                        'Scripting/Et1/ASTQueries/find_binding_names.cc',
                        'Scripting/Et1/ASTQueries/resolve_type.cc',
                        'Scripting/Et1/ASTPrinters/PrettyPrinter.cc'
                       ],
                LIBS=['gomp', 'SDL', 'SDL_image']
                )
Default(excygen)

def PhonyTarget(target, action):
    import os
    phony = Environment(ENV = os.environ,
                        BUILDERS = { 'phony' : Builder(action = action) })
    AlwaysBuild(phony.phony(target = target, source = 'SConstruct'))

PhonyTarget('test', './excygen test')
Depends('test', excygen)
