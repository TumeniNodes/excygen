#include <Python.h>
#include <boost/python.hpp>
#include <iostream>


namespace PyAPI {
    std::string api_version()
    {
        return "<master>";
    }

    std::string api_compile_date()
    {
        return __DATE__;
    }


    struct Renderer {
        int width, height, samples_per_pixel;

        Renderer(int width, int height, int samples_per_pixel) :
            width(width), height(height), samples_per_pixel(samples_per_pixel) {}
    };


    void render(Renderer const &renderer) {
        std::clog << "rendering (" << renderer.width << "x" << renderer.height << "@"
                  << renderer.samples_per_pixel << "spp)" << std::endl;
    }
}



BOOST_PYTHON_MODULE(excygen) {
    using namespace boost::python;
    using namespace PyAPI;
    def("api_version", api_version);
    def("api_compile_date", api_compile_date);

    def("render", render, (arg("renderer")));

    class_<Renderer>("Renderer", init<int, int, int>((arg("width")=640, arg("height")=480, arg("sample_per_pixel")=16)))
      .def_readonly("width", &Renderer::width)
      .def_readonly("height", &Renderer::height)
      .def_readonly("samples_per_pixel", &Renderer::samples_per_pixel);
}



void PythonAPI(std::string const &script)
{
    std::clog << "excygen python api" << std::endl;
    //Py_SetProgramName(argv[0]);

    std::clog << "initialize python environment..." << std::endl;
    Py_Initialize();

    std::clog << "importing excygen API into python environment..." << std::endl;
    initexcygen(); // This function is generated by BOOST_PYTHON_MODULE and
                   // enriches the Python runtime environment with our API.

    try {
        using namespace boost::python;
        object main_module = import("__main__");
        object main_namespace = main_module.attr("__dict__");

        std::clog << "-- running script ----------------------------------------" << std::endl;
        exec(script.c_str(),
             main_namespace);
        std::clog << "----------------------------------------------------------" << std::endl;
    } catch (boost::python::error_already_set const &) {
        PyErr_Print();
    }

    std::clog << "finalizing..." << std::endl;
    Py_Finalize();

    std::clog << "hope you are happy!" << std::endl;
}
